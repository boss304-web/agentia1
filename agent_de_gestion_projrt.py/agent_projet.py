#!/usr/bin/env python3
"""
Agent IA Chef de Projet Complet
===============================

Un syst√®me intelligent de gestion de projets avec :
- Recherche automatique d'informations
- Gestion compl√®te des projets dans Google Sheets
- Analyses et rappels automatiques
- Interface de chat interactive
- Suivi des stagnations et alertes

Utilise les mod√®les gratuits OpenRouter et AutoGen local.
"""

import os
import json
import logging
import requests
from datetime import datetime, timedelta
from typing import Dict, Any, List, Optional
import time
import schedule
import threading
import sys

# AutoGen imports
import autogen
from autogen import ConversableAgent, GroupChat, GroupChatManager

# Google Sheets imports
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# Email/Notifications (optionnel)
import smtplib
from email.mime.text import MIMEText
from email.mime.multipart import MIMEMultipart

# Configuration du logging
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)


class AgentChefProjet:
    """Agent IA Chef de Projet - Syst√®me complet de gestion"""
    
    def _init_(self, config_path: str = "config.json"):
        """
        Initialise l'agent avec la configuration
        
        Args:
            config_path: Chemin vers le fichier de configuration
        """
        self.config = self._load_config(config_path)
        self.setup_agents()
        self.setup_google_sheets()
        self.projects_cache = {}
        self.last_update = None
        
        # D√©marrer le syst√®me de surveillance
        self.start_monitoring()
    
    def _load_config(self, config_path: str) -> Dict[str, Any]:
        """Charge la configuration depuis un fichier JSON"""
        default_config = {
            "openrouter_api_key": os.getenv("OPENROUTER_API_KEY", ""),
            "google_creds_path": os.getenv("GOOGLE_CREDS_PATH", "credentials.json"),
            "sheet_name": os.getenv("SHEET_NAME", "Gestion_Projets"),
            "email_config": {
                "smtp_server": "smtp.gmail.com",
                "smtp_port": 587,
                "email": os.getenv("EMAIL_USER", ""),
                "password": os.getenv("EMAIL_PASS", "")
            },
            "monitoring": {
                "check_interval_hours": 24,
                "stagnation_alert_days": 7,
                "urgent_alert_days": 14
            }
        }
        
        try:
            with open(config_path, 'r', encoding='utf-8') as f:
                config = json.load(f)
                # Fusionner avec la config par d√©faut
                default_config.update(config)
                return default_config
        except FileNotFoundError:
            logger.info(f"Config file not found, using default config")
            # Cr√©er le fichier de config par d√©faut
            with open(config_path, 'w', encoding='utf-8') as f:
                json.dump(default_config, f, indent=2)
            return default_config
    
    def setup_agents(self):
        """Configure les agents IA sp√©cialis√©s"""
        
        # Configuration commune
        base_config = {
            "api_key": self.config["openrouter_api_key"],
            "base_url": "https://openrouter.ai/api/v1",
            "max_tokens": 1000,
        }
        
        # üîç Agent Recherche - Sp√©cialis√© dans la recherche et l'analyse
        self.agent_recherche = ConversableAgent(
            name="AgentRecherche",
            system_message="""Tu es un expert en recherche d'informations et analyse de projets.
            
            Tes comp√©tences :
            - Analyser les requ√™tes de recherche et projets
            - Structurer l'information de mani√®re logique
            - Identifier les points critiques et opportunit√©s
            - Proposer des solutions pratiques
            - Faire des recommandations bas√©es sur les donn√©es
            
            Format de r√©ponse :
            ## üîç ANALYSE
            [Ton analyse d√©taill√©e]
            
            ## üìä POINTS CL√âS
            [Liste des √©l√©ments importants]
            
            ## üéØ RECOMMANDATIONS
            [Actions concr√®tes √† entreprendre]
            
            ## ‚ö† ALERTES
            [Risques ou points d'attention]
            
            Sois pr√©cis, factuel et orient√© solution.""",
            llm_config={**base_config, "model": "meta-llama/llama-3.1-8b-instruct:free", "temperature": 0.3},
            human_input_mode="NEVER",
            max_consecutive_auto_reply=1,
        )
        
        # üìù Agent R√©dacteur - Sp√©cialis√© dans la synth√®se et communication
        self.agent_redacteur = ConversableAgent(
            name="AgentRedacteur",
            system_message="""Tu es un assistant personnel expert en communication et gestion de projets.
            
            Ton r√¥le :
            - Reformuler les analyses en langage clair et actionnable
            - Prioriser les informations selon leur importance
            - Cr√©er des r√©sum√©s engageants et motivants
            - Proposer des plans d'action concrets
            - Adapter le ton selon le contexte (urgent, informatif, encourageant)
            
            Tu dois toujours :
            - Commencer par un r√©sum√© ex√©cutif
            - Utiliser des emojis pour structurer
            - √ätre bienveillant mais direct
            - Proposer des actions concr√®tes
            - Inclure des √©ch√©ances si pertinent
            
            Format de r√©ponse :
            ## üéØ R√âSUM√â EX√âCUTIF
            [Synth√®se en 2-3 phrases]
            
            ## üìã PLAN D'ACTION
            [√âtapes concr√®tes √† suivre]
            
            ## üîî RAPPELS
            [Ce qu'il faut retenir]""",
            llm_config={**base_config, "model": "microsoft/wizardlm-2-8x22b:free", "temperature": 0.7},
            human_input_mode="NEVER",
            max_consecutive_auto_reply=1,
        )
        
        # ü§ñ Agent Planificateur - Sp√©cialis√© dans la planification et suivi
        self.agent_planificateur = ConversableAgent(
            name="AgentPlanificateur",
            system_message="""Tu es un expert en planification et suivi de projets.
            
            Tes sp√©cialit√©s :
            - Analyser les deadlines et priorit√©s
            - D√©tecter les blocages et retards
            - Proposer des r√©ajustements de planning
            - Optimiser l'allocation des ressources
            - Anticiper les risques
            
            Tu dois toujours :
            - √âvaluer la faisabilit√© des d√©lais
            - Identifier les d√©pendances entre t√¢ches
            - Proposer des alternatives en cas de blocage
            - Calculer les impacts sur le planning global
            
            Format de r√©ponse :
            ## üìÖ ANALYSE PLANNING
            [√âvaluation des d√©lais et contraintes]
            
            ## üö® ALERTES TIMING
            [Deadlines critiques ou retards]
            
            ## üîÑ R√âAJUSTEMENTS
            [Propositions d'optimisation]""",
            llm_config={**base_config, "model": "google/gemma-2-9b-it:free", "temperature": 0.4},
            human_input_mode="NEVER",
            max_consecutive_auto_reply=1,
        )
        
        logger.info("‚úÖ Agents IA configur√©s avec succ√®s")
    
    def setup_google_sheets(self):
        """Configure la connexion √† Google Sheets"""
        try:
            scope = [
                'https://spreadsheets.google.com/feeds',
                'https://www.googleapis.com/auth/drive'
            ]
            
            creds = ServiceAccountCredentials.from_json_keyfile_name(
                self.config["google_creds_path"], scope
            )
            
            self.gc = gspread.authorize(creds)
            self.sheet = self.gc.open(self.config["sheet_name"]).sheet1
            
            # Configurer les en-t√™tes avec votre structure
            self.setup_sheet_headers()
            
            logger.info("‚úÖ Connexion Google Sheets √©tablie")
            
        except Exception as e:
            logger.error(f"‚ùå Erreur Google Sheets : {e}")
            raise
    
    def setup_sheet_headers(self):
        """Configure les en-t√™tes selon votre structure"""
        headers = [
            'Nom_Projet', 'Statut', 'Priorit√©', 'Description', 'Prochaine_Action',
            'Deadline', 'Date_Creation', 'Derni√®re_MAJ', 'Jours_Stagnation',
            'Alerte', 'Progression_%', 'Notes'
        ]
        
        try:
            existing_headers = self.sheet.row_values(1)
            if not existing_headers or existing_headers != headers:
                self.sheet.clear()
                self.sheet.insert_row(headers, 1)
                logger.info("üìã En-t√™tes configur√©s")
        except Exception as e:
            logger.error(f"‚ùå Erreur en-t√™tes : {e}")
    
    def rechercher_information(self, query: str, project_context: str = "") -> Dict[str, Any]:
        """
        Effectue une recherche d'information avec analyse par les agents
        
        Args:
            query: Requ√™te de recherche
            project_context: Contexte du projet (optionnel)
            
        Returns:
            R√©sultat de la recherche avec analyse
        """
        try:
            logger.info(f"üîç Recherche en cours : {query}")
            
            # Pr√©parer le contexte complet
            context = f"""
            Requ√™te de recherche : {query}
            Contexte du projet : {project_context}
            Date : {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
            
            Analyse cette requ√™te et fournis une recherche approfondie.
            """
            
            # √âtape 1 : Analyse par l'agent recherche
            recherche_result = self.agent_recherche.generate_reply(
                messages=[{"role": "user", "content": context}]
            )
            
            # √âtape 2 : Planification si n√©cessaire
            if any(word in query.lower() for word in ['deadline', 'planning', 'd√©lai', '√©ch√©ance']):
                planning_result = self.agent_planificateur.generate_reply(
                    messages=[{"role": "user", "content": f"Analyse planning pour : {recherche_result}"}]
                )
            else:
                planning_result = ""
            
            # √âtape 3 : Synth√®se finale
            synthesis_context = f"""
            Recherche effectu√©e : {query}
            
            Analyse de recherche :
            {recherche_result}
            
            Analyse planning :
            {planning_result}
            
            Synth√©tise cette information pour l'utilisateur.
            """
            
            final_result = self.agent_redacteur.generate_reply(
                messages=[{"role": "user", "content": synthesis_context}]
            )
            
            # Sauvegarder la recherche
            self.save_research_log(query, final_result, project_context)
            
            return {
                "query": query,
                "context": project_context,
                "raw_analysis": recherche_result,
                "planning_analysis": planning_result,
                "final_synthesis": final_result,
                "timestamp": datetime.now().isoformat(),
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur lors de la recherche : {e}")
            return {
                "query": query,
                "error": str(e),
                "timestamp": datetime.now().isoformat(),
                "status": "error"
            }
    
    def ajouter_projet(self, nom_projet: str, description: str, priorite: int = 2, 
                      deadline: str = "", notes: str = "") -> Dict[str, Any]:
        """
        Ajoute un nouveau projet au syst√®me
        
        Args:
            nom_projet: Nom du projet
            description: Description d√©taill√©e
            priorite: Priorit√© (1=Haute, 2=Moyenne, 3=Basse, 4=Optionnelle)
            deadline: Date limite (format YYYY-MM-DD)
            notes: Notes additionnelles
            
        Returns:
            R√©sultat de l'ajout
        """
        try:
            # Analyser le projet avec l'agent recherche
            project_analysis = self.agent_recherche.generate_reply(
                messages=[{"role": "user", "content": f"""
                Analyse ce nouveau projet :
                
                Nom : {nom_projet}
                Description : {description}
                Priorit√© : {priorite}
                Deadline : {deadline}
                Notes : {notes}
                
                Propose une premi√®re action et identifie les risques potentiels.
                """}]
            )
            
            # Obtenir des recommandations de planification
            planning_advice = self.agent_planificateur.generate_reply(
                messages=[{"role": "user", "content": f"""
                Nouveau projet √† planifier :
                {project_analysis}
                
                √âvalue la faisabilit√© du d√©lai et propose un plan d'action.
                """}]
            )
            
            # Synth√®se finale
            project_summary = self.agent_redacteur.generate_reply(
                messages=[{"role": "user", "content": f"""
                Synth√©tise l'analyse de ce nouveau projet :
                
                Analyse : {project_analysis}
                Planning : {planning_advice}
                
                Fournis un r√©sum√© actionnable pour d√©marrer le projet.
                """}]
            )
            
            # Pr√©parer les donn√©es pour Google Sheets
            current_date = datetime.now().strftime("%Y-%m-%d")
            
            # Extraire la premi√®re action recommand√©e
            prochaine_action = "Analyser les besoins"  # Valeur par d√©faut
            if "action" in project_analysis.lower():
                lines = project_analysis.split('\n')
                for line in lines:
                    if "action" in line.lower() and len(line) > 10:
                        prochaine_action = line.strip()[:100]
                        break
            
            row_data = [
                nom_projet,
                "√Ä faire",
                priorite,
                description,
                prochaine_action,
                deadline if deadline else "",
                current_date,
                current_date,
                0,  # Jours_Stagnation
                "",  # Alerte
                0,   # Progression_%
                notes + f"\n\nAnalyse IA : {project_summary[:200]}..."
            ]
            
            # Ajouter √† la feuille
            self.sheet.append_row(row_data)
            
            # Mettre √† jour le cache
            self.refresh_projects_cache()
            
            logger.info(f"‚úÖ Projet ajout√© : {nom_projet}")
            
            return {
                "nom_projet": nom_projet,
                "status": "success",
                "analysis": project_analysis,
                "planning": planning_advice,
                "summary": project_summary,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur ajout projet : {e}")
            return {
                "nom_projet": nom_projet,
                "status": "error",
                "error": str(e),
                "timestamp": datetime.now().isoformat()
            }
    
    def mettre_a_jour_projet(self, nom_projet: str, **kwargs) -> Dict[str, Any]:
        """
        Met √† jour un projet existant
        
        Args:
            nom_projet: Nom du projet √† mettre √† jour
            **kwargs: Champs √† mettre √† jour
            
        Returns:
            R√©sultat de la mise √† jour
        """
        try:
            # Trouver le projet
            projects = self.get_all_projects()
            project_row = None
            
            for i, project in enumerate(projects, 2):  # Ligne 2 = premier projet
                if project.get('Nom_Projet') == nom_projet:
                    project_row = i
                    break
            
            if not project_row:
                return {
                    "nom_projet": nom_projet,
                    "status": "error",
                    "error": "Projet non trouv√©"
                }
            
            # Colonnes mapping
            columns = {
                'statut': 2, 'priorite': 3, 'description': 4, 'prochaine_action': 5,
                'deadline': 6, 'notes': 12
            }
            
            # Mettre √† jour les champs
            for field, value in kwargs.items():
                if field.lower() in columns:
                    self.sheet.update_cell(project_row, columns[field.lower()], value)
            
            # Mettre √† jour la date de derni√®re MAJ
            self.sheet.update_cell(project_row, 8, datetime.now().strftime("%Y-%m-%d"))
            
            # Analyser la mise √† jour
            update_context = f"""
            Projet mis √† jour : {nom_projet}
            Modifications : {kwargs}
            
            Analyse cette mise √† jour et fournis des recommandations.
            """
            
            update_analysis = self.agent_redacteur.generate_reply(
                messages=[{"role": "user", "content": update_context}]
            )
            
            logger.info(f"‚úÖ Projet mis √† jour : {nom_projet}")
            
            return {
                "nom_projet": nom_projet,
                "status": "success",
                "updates": kwargs,
                "analysis": update_analysis,
                "timestamp": datetime.now().isoformat()
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur mise √† jour : {e}")
            return {
                "nom_projet": nom_projet,
                "status": "error",
                "error": str(e)
            }
    
    def get_all_projects(self) -> List[Dict[str, Any]]:
        """R√©cup√®re tous les projets"""
        try:
            return self.sheet.get_all_records()
        except Exception as e:
            logger.error(f"‚ùå Erreur r√©cup√©ration projets : {e}")
            return []
    
    def rechercher_projet(self, query: str) -> List[Dict[str, Any]]:
        """
        Recherche un projet sp√©cifique
        
        Args:
            query: Terme de recherche
            
        Returns:
            Liste des projets correspondants
        """
        projects = self.get_all_projects()
        results = []
        
        query_lower = query.lower()
        
        for project in projects:
            # Rechercher dans le nom, description et notes
            if (query_lower in project.get('Nom_Projet', '').lower() or
                query_lower in project.get('Description', '').lower() or
                query_lower in project.get('Notes', '').lower()):
                results.append(project)
        
        return results
    
    def generer_rapport_quotidien(self) -> Dict[str, Any]:
        """G√©n√®re un rapport quotidien des projets"""
        try:
            projects = self.get_all_projects()
            
            # Pr√©parer les statistiques
            stats = {
                'total': len(projects),
                'en_cours': len([p for p in projects if p.get('Statut') == 'En cours']),
                'a_faire': len([p for p in projects if p.get('Statut') == '√Ä faire']),
                'termines': len([p for p in projects if p.get('Statut') == 'Termin√©']),
                'bloques': len([p for p in projects if p.get('Statut') == 'Bloqu√©']),
                'urgents': len([p for p in projects if 'üö®' in p.get('Alerte', '')]),
            }
            
            # Projets critiques
            critiques = [p for p in projects if p.get('Priorit√©') == 1 and p.get('Statut') != 'Termin√©']
            
            # Projets en retard
            today = datetime.now().date()
            retards = []
            for p in projects:
                if p.get('Deadline') and p.get('Statut') != 'Termin√©':
                    try:
                        deadline = datetime.strptime(p['Deadline'], '%Y-%m-%d').date()
                        if deadline < today:
                            retards.append(p)
                    except ValueError:
                        pass
            
            # G√©n√©rer l'analyse avec l'agent
            rapport_context = f"""
            G√©n√®re un rapport quotidien des projets :
            
            Statistiques :
            - Total : {stats['total']} projets
            - En cours : {stats['en_cours']}
            - √Ä faire : {stats['a_faire']}
            - Termin√©s : {stats['termines']}
            - Bloqu√©s : {stats['bloques']}
            - Urgents : {stats['urgents']}
            
            Projets critiques : {len(critiques)}
            Projets en retard : {len(retards)}
            
            Fournis un r√©sum√© avec recommandations d'actions.
            """
            
            rapport_analysis = self.agent_redacteur.generate_reply(
                messages=[{"role": "user", "content": rapport_context}]
            )
            
            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "statistics": stats,
                "projets_critiques": critiques,
                "projets_retard": retards,
                "analysis": rapport_analysis,
                "status": "success"
            }
            
        except Exception as e:
            logger.error(f"‚ùå Erreur rapport quotidien : {e}")
            return {
                "date": datetime.now().strftime("%Y-%m-%d"),
                "status": "error",
                "error": str(e)
            }
    
    def save_research_log(self, query: str, result: str, context: str = ""):
        """Sauvegarde les recherches dans un log"""
        try:
            log_entry = {
                "timestamp": datetime.now().isoformat(),
                "query": query,
                "context": context,
                "result": result[:500] + "..." if len(result) > 500 else result
            }
            
            # Sauvegarder dans un fichier JSON
            log_file = "research_log.json"
            logs = []
            
            if os.path.exists(log_file):
                with open(log_file, 'r', encoding='utf-8') as f:
                    logs = json.load(f)
            
            logs.append(log_entry)
            
            # Garder seulement les 100 derni√®res recherches
            if len(logs) > 100:
                logs = logs[-100:]
            
            with open(log_file, 'w', encoding='utf-8') as f:
                json.dump(logs, f, indent=2, ensure_ascii=False)
            
        except Exception as e:
            logger.error(f"‚ùå Erreur sauvegarde log : {e}")
    
    def refresh_projects_cache(self):
        """Met √† jour le cache des projets"""
        try:
            self.projects_cache = self.get_all_projects()
            self.last_update = datetime.now()
        except Exception as e:
            logger.error(f"‚ùå Erreur refresh cache : {e}")
    
    def start_monitoring(self):
        """D√©marre le syst√®me de surveillance automatique"""
        def monitor_projects():
            try:
                # V√©rifier les projets stagnants
                projects = self.get_all_projects()
                alerts = []
                
                for project in projects:
                    if project.get('Statut') not in ['Termin√©', 'Annul√©']:
                        # V√©rifier la stagnation
                        jours_stagnation = project.get('Jours_Stagnation', 0)
                        if isinstance(jours_stagnation, (int, float)) and jours_stagnation > 7:
                            alerts.append(f"‚ö† {project['Nom_Projet']} : {jours_stagnation} jours sans mise √† jour")
                
                if alerts:
                    alert_message = "\n".join(alerts)
                    logger.warning(f"üö® Alertes d√©tect√©es :\n{alert_message}")
                    
                    # Optionnel : envoyer par email
                    # self.send_alert_email(alert_message)
                
            except Exception as e:
                logger.error(f"‚ùå Erreur monitoring : {e}")
        
        # Programmer les v√©rifications
        schedule.every(24).hours.do(monitor_projects)
        
        # Lancer le thread de surveillance
        def run_scheduler():
            while True:
                schedule.run_pending()
                time.sleep(3600)  # V√©rifier toutes les heures
        
        monitoring_thread = threading.Thread(target=run_scheduler, daemon=True)
        monitoring_thread.start()
        
        logger.info("üîÑ Syst√®me de surveillance d√©marr√©")
    
    def chat_interface(self):
        """Interface de chat interactive"""
        print("\n" + "="*60)
        print("ü§ñ AGENT IA CHEF DE PROJET")
        print("="*60)
        print("Commandes disponibles :")
        print("- rechercher [query] : Rechercher des informations")
        print("- ajouter : Ajouter un nouveau projet")
        print("- projet [nom] : Chercher un projet sp√©cifique")
        print("- rapport : G√©n√©rer un rapport quotidien")
        print("- projets : Lister tous les projets")
        print("- quit : Quitter")
        print("="*60)
        
        while True:
            try:
                user_input = input("\nüéØ Votre demande : ").strip()
                
                if user_input.lower() == 'quit':
                    print("üëã Au revoir !")
                    break
                
                elif user_input.lower().startswith('rechercher '):
                    query = user_input[11:]
                    print(f"\nüîç Recherche en cours : {query}")
                    result = self.rechercher_information(query)
                    if result['status'] == 'success':
                        print(f"\nüìä R√©sultat :\n{result['final_synthesis']}")
                    else:
                        print(f"\n‚ùå Erreur : {result['error']}")
                
                elif user_input.lower() == 'ajouter':
                    print("\nüìù Ajout d'un nouveau projet")
                    nom = input("Nom du projet : ")
                    description = input("Description : ")
                    priorite = input("Priorit√© (1-4) : ")
                    deadline = input("Deadline (YYYY-MM-DD) : ")
                    notes = input("Notes : ")
                    
                    result = self.ajouter_projet(
                        nom, description, 
                        int(priorite) if priorite.isdigit() else 2,
                        deadline, notes
                    )
                    
                    if result['status'] == 'success':
                        print(f"\n‚úÖ Projet ajout√© avec succ√®s !")
                        print(f"üìã Analyse :\n{result['summary']}")
                    else:
                        print(f"\n‚ùå Erreur : {result['error']}")
                
                elif user_input.lower().startswith('projet '):
                    nom_projet = user_input[7:]
                    results = self.rechercher_projet(nom_projet)
                    
                    if results:
                        print(f"\nüìã Projets trouv√©s ({len(results)}) :")
                        for i, projet in enumerate(results, 1):
                            print(f"{i}. {projet['Nom_Projet']} - {projet['Statut']}")
                            print(f"   üìù {projet['Description']}")
                            print(f"   üìÖ Deadline: {projet.get('Deadline', 'N/A')}")
                            print(f"   üîÑ Prochaine action: {projet.get('Prochaine_Action', 'N/A')}")
                            print()
                    else:
                        print(f"\n‚ùå Aucun projet trouv√© pour '{nom_projet}'")
                
                elif user_input.lower() == 'rapport':
                    print("\nüìä G√©n√©ration du rapport quotidien...")
                    rapport = self.generer_rapport_quotidien()
                    
                    if rapport['status'] == 'success':
                        print(f"\nüìà RAPPORT DU {rapport['date']}")
                        print(f"üìä Statistiques : {rapport['statistics']}")
                        print(f"\nüéØ Analyse :\n{rapport['analysis']}")
                    else:
                        print(f"\n‚ùå Erreur : {rapport['error']}")
                
                elif user_input.lower() == 'projets':
                    projects = self.get_all_projects()
                    print(f"\nüìã Tous les projets ({len(projects)}) :")
                    for i, projet in enumerate(projects, 1):
                        status_emoji = {"En cours": "üîÑ", "√Ä faire": "üìã", "Termin√©": "‚úÖ", "Bloqu√©": "üö´"}.get(projet['Statut'], "‚ùì")
                        print(f"{i}. {status_emoji} {projet['Nom_Projet']} - {projet['Statut']}")
                
                else:
                    # Requ√™te libre - analyser avec l'agent
                    print(f"\nü§ñ Traitement de votre demande...")
                    result = self.agent_redacteur.generate_reply(
                        messages=[{"role": "user", "content": f"""
                        L'utilisateur demande : {user_input}
                        
                        Contexte : Tu es l'assistant chef de projet. L'utilisateur peut :
                        - Poser des questions sur ses projets
                        - Demander des conseils en gestion de projet
                        - Chercher de l'aide pour organiser son travail
                        - Demander des analyses ou recommandations
                        
                        Projets actuels : {len(self.get_all_projects())} projets en cours
                        
                        R√©ponds de mani√®re utile et actionnable.
                        """}]
                    )
                    print(f"\nüí° R√©ponse :\n{result}")
                
            except KeyboardInterrupt:
                print("\nüëã Au revoir !")
                break
            except Exception as e:
                print(f"\n‚ùå Erreur : {e}")
                logger.error(f"Erreur dans le chat : {e}")


def main():
    """Fonction principale"""
    print("üöÄ Initialisation de l'Agent IA Chef de Projet...")
    
    try:
        # Initialiser l'agent
        agent = AgentChefProjet()
        
        # D√©marrer l'interface de chat
        agent.chat_interface()
        
    except Exception as e:
        print(f"‚ùå Erreur lors de l'initialisation : {e}")
        logger.error(f"Erreur principale : {e}")


def create_sample_config():
    """Cr√©e un fichier de configuration d'exemple"""
    config = {
        "openrouter_api_key": "YOUR_OPENROUTER_API_KEY",
        "google_creds_path": "path/to/your/google-credentials.json",
        "sheet_name": "Gestion_Projets",
        "email_config": {
            "smtp_server": "smtp.gmail.com",
            "smtp_port": 587,
            "email": "your_email@gmail.com",
            "password": "your_app_password"
        },
        "monitoring": {
            "check_interval_hours": 24,
            "stagnation_alert_days": 7,
            "urgent_alert_days": 14
        }
    }
    
    with open("config_example.json", "w", encoding="utf-8") as f:
        json.dump(config, f, indent=2, ensure_ascii=False)
    
    print("üìù Fichier config_example.json cr√©√©")


# Fonctions utilitaires suppl√©mentaires
class ProjectAnalyzer:
    """Classe pour analyses avanc√©es des projets"""
    
    def _init_(self, agent_chef_projet):
        self.agent = agent_chef_projet
    
    def analyze_project_health(self, project_name: str) -> Dict[str, Any]:
        """Analyse la sant√© d'un projet"""
        projects = self.agent.rechercher_projet(project_name)
        
        if not projects:
            return {"error": "Projet non trouv√©"}
        
        project = projects[0]
        
        # Calculer les m√©triques
        health_score = 100
        issues = []
        
        # V√©rifier la stagnation
        jours_stagnation = project.get('Jours_Stagnation', 0)
        if isinstance(jours_stagnation, (int, float)):
            if jours_stagnation > 14:
                health_score -= 30
                issues.append(f"üö® Stagnation critique: {jours_stagnation} jours")
            elif jours_stagnation > 7:
                health_score -= 15
                issues.append(f"‚ö† Stagnation mod√©r√©e: {jours_stagnation} jours")
        
        # V√©rifier le statut
        if project.get('Statut') == 'Bloqu√©':
            health_score -= 40
            issues.append("üö´ Projet bloqu√©")
        
        # V√©rifier la deadline
        if project.get('Deadline'):
            try:
                deadline = datetime.strptime(project['Deadline'], '%Y-%m-%d').date()
                today = datetime.now().date()
                days_remaining = (deadline - today).days
                
                if days_remaining < 0:
                    health_score -= 50
                    issues.append(f"üìÖ En retard de {abs(days_remaining)} jours")
                elif days_remaining <= 3:
                    health_score -= 20
                    issues.append(f"‚è∞ Deadline dans {days_remaining} jours")
            except ValueError:
                pass
        
        # V√©rifier la progression
        progression = project.get('Progression_%', 0)
        if isinstance(progression, (int, float)):
            if progression < 25 and project.get('Statut') == 'En cours':
                health_score -= 10
                issues.append("üìä Progression faible")
        
        # D√©terminer le niveau de sant√©
        if health_score >= 80:
            health_level = "üü¢ Excellente"
        elif health_score >= 60:
            health_level = "üü° Bonne"
        elif health_score >= 40:
            health_level = "üü† Pr√©occupante"
        else:
            health_level = "üî¥ Critique"
        
        return {
            "project_name": project_name,
            "health_score": max(0, health_score),
            "health_level": health_level,
            "issues": issues,
            "recommendations": self.generate_recommendations(project, issues)
        }
    
    def generate_recommendations(self, project: Dict, issues: List[str]) -> List[str]:
        """G√©n√®re des recommandations bas√©es sur les probl√®mes d√©tect√©s"""
        recommendations = []
        
        if any("stagnation" in issue.lower() for issue in issues):
            recommendations.append("üìû Planifier une r√©union d'√©quipe pour d√©bloquer le projet")
            recommendations.append("üîÑ Revoir les objectifs et priorit√©s")
        
        if any("bloqu√©" in issue.lower() for issue in issues):
            recommendations.append("üö´ Identifier les blocages et les ressources n√©cessaires")
            recommendations.append("ü§ù Escalader aupr√®s des parties prenantes")
        
        if any("retard" in issue.lower() for issue in issues):
            recommendations.append("‚è± Revoir le planning et les livrables")
            recommendations.append("üìä Prioriser les t√¢ches critiques")
        
        if any("progression" in issue.lower() for issue in issues):
            recommendations.append("üéØ D√©composer en sous-t√¢ches plus petites")
            recommendations.append("üìà D√©finir des jalons interm√©diaires")
        
        return recommendations


class ReportGenerator:
    """G√©n√©rateur de rapports avanc√©s"""
    
    def _init_(self, agent_chef_projet):
        self.agent = agent_chef_projet
    
    def generate_weekly_report(self) -> Dict[str, Any]:
        """G√©n√®re un rapport hebdomadaire"""
        projects = self.agent.get_all_projects()
        
        # Analyse des tendances
        active_projects = [p for p in projects if p.get('Statut') in ['En cours', '√Ä faire']]
        completed_this_week = [p for p in projects if p.get('Statut') == 'Termin√©']
        
        # Calcul des m√©triques
        total_progression = sum(p.get('Progression_%', 0) for p in active_projects)
        avg_progression = total_progression / len(active_projects) if active_projects else 0
        
        # Projets √† risque
        at_risk_projects = []
        for project in active_projects:
            analyzer = ProjectAnalyzer(self.agent)
            health = analyzer.analyze_project_health(project['Nom_Projet'])
            if health.get('health_score', 100) < 60:
                at_risk_projects.append(project)
        
        return {
            "periode": f"Semaine du {datetime.now().strftime('%Y-%m-%d')}",
            "total_projects": len(projects),
            "active_projects": len(active_projects),
            "completed_projects": len(completed_this_week),
            "average_progression": round(avg_progression, 1),
            "at_risk_projects": len(at_risk_projects),
            "at_risk_details": at_risk_projects[:5],  # Top 5 des projets √† risque
            "key_metrics": {
                "completion_rate": round(len(completed_this_week) / len(projects) * 100, 1) if projects else 0,
                "efficiency_score": round(avg_progression / len(active_projects) * 100, 1) if active_projects else 0
            }
        }
    
    def export_to_markdown(self, report_data: Dict[str, Any]) -> str:
        """Exporte un rapport en format Markdown"""
        md_content = f"""# Rapport de Gestion de Projets

## üìä Vue d'ensemble

- *P√©riode*: {report_data.get('periode', 'N/A')}
- *Total des projets*: {report_data.get('total_projects', 0)}
- *Projets actifs*: {report_data.get('active_projects', 0)}
- *Projets termin√©s*: {report_data.get('completed_projects', 0)}
- *Progression moyenne*: {report_data.get('average_progression', 0)}%

## üö® Projets √† risque

{report_data.get('at_risk_projects', 0)} projets n√©cessitent une attention particuli√®re.

## üìà M√©triques cl√©s

- *Taux de completion*: {report_data.get('key_metrics', {}).get('completion_rate', 0)}%
- *Score d'efficacit√©*: {report_data.get('key_metrics', {}).get('efficiency_score', 0)}%

---
Rapport g√©n√©r√© le {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}
"""
        return md_content


# Script d'installation automatique
def install_dependencies():
    """Installe les d√©pendances n√©cessaires"""
    import subprocess
    import sys
    
    dependencies = [
        "autogen-agentchat",
        "gspread",
        "oauth2client",
        "schedule",
        "requests"
    ]
    
    print("üì¶ Installation des d√©pendances...")
    for dep in dependencies:
        try:
            subprocess.check_call([sys.executable, "-m", "pip", "install", dep])
            print(f"‚úÖ {dep} install√©")
        except subprocess.CalledProcessError:
            print(f"‚ùå Erreur installation {dep}")


if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Agent IA Chef de Projet")
    parser.add_argument("--install", action="store_true", help="Installer les d√©pendances")
    parser.add_argument("--config", action="store_true", help="Cr√©er un fichier de configuration d'exemple")
    parser.add_argument("--chat", action="store_true", help="D√©marrer l'interface de chat")
    
    args = parser.parse_args()
    
    if args.install:
        install_dependencies()
    elif args.config:
        create_sample_config()
    elif args.chat or len(sys.argv) == 1:
        main()
    else:
        parser.print_help()